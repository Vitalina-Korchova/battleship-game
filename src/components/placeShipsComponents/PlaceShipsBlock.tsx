import styles from "./PlaceShips.module.css";
import Battlefield from "./BattlefieldPlace";
import Ship from "./Ship";
import { useState, useEffect } from "react";
import { Link } from "react-router-dom";

export default function PlaceShipsBlock({
  setArrOccupiedCells,
}: {
  setArrOccupiedCells: React.Dispatch<React.SetStateAction<string[]>>;
}) {
  const [selectedCell, setSelectedCell] = useState<string[]>([]); //–¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫—É–∂–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å(–ø—ñ–¥—Å–≤—ñ—Ç–∫–∞ –∫–ª—ñ—Ç–∏–Ω–æ–∫)
  const [selectedShip, setSelectedShip] = useState<{
    amount: number | null;
    id: string | null;
  }>({
    amount: null,
    id: null,
  }); //–æ–±—Ä–∞–Ω–∏–π –∫–æ—Ä–∞–±–µ–ª—å
  const [occupiedCells, setOccupiedCells] = useState<string[]>([]); //–∑–∞–π–Ω—è—Ç—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏(—Ä–æ–∑–º—ñ—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–µ–ª—å)
  const [placedShips, setPlacedShips] = useState<string[]>([]); //–¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω–Ω—è —á–∏ –∫–æ—Ä–∞–±–µ–ª—å –≤–∂–µ –±—É–≤ —Ä–æ–∑–º—ñ—â–µ–Ω–∏–π —á–∏ —â–µ –Ω—ñ
  const [shipDirections, setShipDirections] = useState<{
    //–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º—É –∫–æ—Ä–∞–±–ª—è
    [key: string]: string;
  }>({});

  // console.log("Occupied cells: ", occupiedCells);

  useEffect(() => {
    setArrOccupiedCells(occupiedCells);
  }, [occupiedCells, setArrOccupiedCells]);

  const mouseLeave = () => {
    setSelectedCell([]);
  };

  const handleClickShip = (amount: number, id: string) => {
    setSelectedShip({ amount, id });

    //–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –Ω–∞–ø—Ä—è–º–æ–∫ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π
    if (!shipDirections[id]) {
      setShipDirections((prevDirections) => ({
        ...prevDirections,
        [id]: "vertical",
      }));
    }
    console.log(`Was click the ship ${amount} with id ${id} direction `);
    console.log(
      `Direction for ship ${id}: ${shipDirections[id] || "vertical"}`
    );
  };

  //–ø—ñ–¥—Å–≤—ñ—Ç–∫–∞ –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è
  const mouseEnter = (e: React.DragEvent<HTMLDivElement>) => {
    const cellId = e.target.id;
    const cellNumber = parseInt(cellId.split("-")[1], 10);

    // –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—É—Å—ñ–¥–Ω—ñ—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
    const checkNeighbors = (shipCells: string[]): boolean => {
      for (const cell of shipCells) {
        const num = parseInt(cell.split("-")[1], 10);
        const row = Math.ceil(num / 10);
        const col = num % 10 === 0 ? 10 : num % 10;

        // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑–≤–µ—Ä—Ö—É
        if (row > 1) {
          if (occupiedCells.includes(`cell-${num - 10}`)) return false;
        }

        // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑–Ω–∏–∑—É
        if (row < 10) {
          if (occupiedCells.includes(`cell-${num + 10}`)) return false;
        }

        // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑–ª—ñ–≤–∞
        if (col > 1) {
          if (occupiedCells.includes(`cell-${num - 1}`)) return false;
        }

        // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∏ —Å–ø—Ä–∞–≤–∞
        if (col < 10) {
          if (occupiedCells.includes(`cell-${num + 1}`)) return false;
        }

        // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—ñ–∞–≥–æ–Ω–∞–ª—å–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
        if (row > 1 && col > 1) {
          if (occupiedCells.includes(`cell-${num - 11}`)) return false;
        }
        if (row > 1 && col < 10) {
          if (occupiedCells.includes(`cell-${num - 9}`)) return false;
        }
        if (row < 10 && col > 1) {
          if (occupiedCells.includes(`cell-${num + 9}`)) return false;
        }
        if (row < 10 && col < 10) {
          if (occupiedCells.includes(`cell-${num + 11}`)) return false;
        }
      }
      return true;
    };

    let newSelectedCells: string[] = [];

    if (
      selectedShip.id !== null &&
      shipDirections[selectedShip.id] === "vertical"
    ) {
      if (selectedShip.amount === 1) {
        if (cellNumber <= 100) {
          newSelectedCells = [`cell-${cellNumber}`];
        }
      } else if (selectedShip.amount === 2) {
        if (cellNumber <= 90) {
          newSelectedCells = [`cell-${cellNumber}`, `cell-${cellNumber + 10}`];
        }
      } else if (selectedShip.amount === 3) {
        if (cellNumber <= 80) {
          newSelectedCells = [
            `cell-${cellNumber}`,
            `cell-${cellNumber + 10}`,
            `cell-${cellNumber + 20}`,
          ];
        }
      } else if (selectedShip.amount === 4) {
        if (cellNumber <= 70) {
          newSelectedCells = [
            `cell-${cellNumber}`,
            `cell-${cellNumber + 10}`,
            `cell-${cellNumber + 20}`,
            `cell-${cellNumber + 30}`,
          ];
        }
      }
    } else {
      if (selectedShip.amount === 1) {
        if (cellNumber <= 100) {
          newSelectedCells = [`cell-${cellNumber}`];
        }
      } else if (selectedShip.amount === 2) {
        if (cellNumber % 10 !== 0) {
          newSelectedCells = [`cell-${cellNumber}`, `cell-${cellNumber + 1}`];
        }
      } else if (selectedShip.amount === 3) {
        if (Math.ceil(cellNumber / 10) === Math.ceil((cellNumber + 2) / 10)) {
          newSelectedCells = [
            `cell-${cellNumber}`,
            `cell-${cellNumber + 1}`,
            `cell-${cellNumber + 2}`,
          ];
        }
      } else if (selectedShip.amount === 4) {
        if (Math.ceil(cellNumber / 10) === Math.ceil((cellNumber + 3) / 10)) {
          newSelectedCells = [
            `cell-${cellNumber}`,
            `cell-${cellNumber + 1}`,
            `cell-${cellNumber + 2}`,
            `cell-${cellNumber + 3}`,
          ];
        }
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å
    if (newSelectedCells.length > 0 && checkNeighbors(newSelectedCells)) {
      setSelectedCell(newSelectedCells);
    } else {
      setSelectedCell([]);
    }
  };

  //—Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤
  const handleClickCells = () => {
    if (selectedCell.length > 0 && selectedShip.id !== null) {
      setOccupiedCells((prevOccupied) => [...prevOccupied, ...selectedCell]);
      setPlacedShips((prevPlaced) => [
        ...prevPlaced,
        selectedShip.id as string,
      ]);
      setSelectedCell([]);
      setSelectedShip({ amount: null, id: null });
    }
  };

  //–ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å
  const handleRotateShip = () => {
    if (selectedShip.id) {
      const newDirection =
        shipDirections[selectedShip.id] === "vertical"
          ? "horizontal"
          : "vertical";

      setShipDirections((prevDirections) => ({
        ...prevDirections,
        [selectedShip.id as string]: newDirection,
      }));
      const ship = document.getElementById(selectedShip.id);
      if (ship) {
        const currentRotation = ship.style.transform;
        ship.style.transform =
          currentRotation === "rotate(-90deg)"
            ? "rotate(0deg)"
            : "rotate(-90deg)";
      }
    }
  };

  //—Å–∫–∏–Ω—É—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
  const resetShipsPosition = () => {
    setOccupiedCells([]);
    setPlacedShips([]);
    setSelectedCell([]);
    setSelectedShip({ amount: null, id: null });
    setShipDirections({});
  };

  return (
    <>
      <div className={styles.container}>
        <div className={styles.innerContainer}>
          <span className={styles.textPlaceShips}>–†–æ–∑—Ç–∞—à—É–π—Ç–µ –∫–æ—Ä–∞–±–ª—ñ üåä</span>
          <Link to="/battle" style={{ textDecoration: "none" }}>
            <button
              disabled={occupiedCells.length !== 20}
              className={styles.buttonStart}
            >
              –°—Ç–∞—Ä—Ç
            </button>
          </Link>

          <Battlefield
            onMouseEnter={mouseEnter}
            onMouseLeave={mouseLeave}
            selectedCell={selectedCell}
            onClickCell={handleClickCells}
            occupiedCells={occupiedCells}
          />
          <div className={styles.containerShips}>
            <span className={styles.textShips}>
              –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –±—É–¥—å-—è–∫–∏–π –∫–æ—Ä–∞–±–µ–ª—å —ñ –≤—ñ–¥–º—ñ–¥—å—Ç–µ –π–æ–≥–æ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –Ω–∞
              –ø–æ–ª—ñ üëá
            </span>
            <div className={styles.blockShipsRow}>
              {!placedShips.includes("ship-1-1") && (
                <Ship
                  id={"ship-1-1"}
                  amount={1}
                  onClick={handleClickShip}
                  selectedShipId={selectedShip.id}
                />
              )}
              {!placedShips.includes("ship-1-2") && (
                <Ship
                  id={"ship-1-2"}
                  amount={1}
                  onClick={handleClickShip}
                  selectedShipId={selectedShip.id}
                />
              )}
              {!placedShips.includes("ship-1-3") && (
                <Ship
                  id={"ship-1-3"}
                  amount={1}
                  onClick={handleClickShip}
                  selectedShipId={selectedShip.id}
                />
              )}
              {!placedShips.includes("ship-1-4") && (
                <Ship
                  id={"ship-1-4"}
                  amount={1}
                  onClick={handleClickShip}
                  selectedShipId={selectedShip.id}
                />
              )}
            </div>
            <div className={styles.blockShipsRow}>
              {!placedShips.includes("ship-2-1") && (
                <Ship
                  id={"ship-2-1"}
                  amount={2}
                  onClick={handleClickShip}
                  selectedShipId={selectedShip.id}
                />
              )}
              {!placedShips.includes("ship-2-2") && (
                <Ship
                  id={"ship-2-2"}
                  amount={2}
                  onClick={handleClickShip}
                  selectedShipId={selectedShip.id}
                />
              )}
              {!placedShips.includes("ship-2-3") && (
                <Ship
                  id={"ship-2-3"}
                  amount={2}
                  onClick={handleClickShip}
                  selectedShipId={selectedShip.id}
                />
              )}
            </div>
            <div className={styles.blockShipsRow}>
              {!placedShips.includes("ship-3-1") && (
                <Ship
                  id={"ship-3-1"}
                  amount={3}
                  onClick={handleClickShip}
                  selectedShipId={selectedShip.id}
                />
              )}
              {!placedShips.includes("ship-3-2") && (
                <Ship
                  id={"ship-3-2"}
                  amount={3}
                  onClick={handleClickShip}
                  selectedShipId={selectedShip.id}
                />
              )}
              {!placedShips.includes("ship-4") && (
                <Ship
                  id={"ship-4"}
                  amount={4}
                  onClick={handleClickShip}
                  selectedShipId={selectedShip.id}
                />
              )}
            </div>
            <button
              className={styles.btnResetShips}
              style={{
                display: occupiedCells.length === 20 ? "block" : "none",
              }}
              onClick={resetShipsPosition}
            >
              –°–∫–∏–Ω—É—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
            </button>
            <button onClick={handleRotateShip} className={styles.buttonRotate}>
              üóò
            </button>
          </div>
        </div>
      </div>
    </>
  );
}
